@page
@model SteadyGrowth.Web.Areas.Admin.Pages.Academy.AddModel
@using SteadyGrowth.Web.Models.Entities
@{
    ViewData["Title"] = "Add New Course";
}

<div class="d-flex flex-column flex-lg-row">
    <div class="d-flex align-items-center position-relative my-1">
        <div id="loading-spinner" class="spinner-border text-primary" role="status" style="display: none;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

<div class="card mb-5 mb-xl-10" id="add-course-card">
    <div class="card-header border-0 cursor-pointer" role="button" data-bs-toggle="collapse" data-bs-target="#kt_account_profile_details" aria-expanded="true" aria-controls="kt_account_profile_details">
        <div class="card-title m-0">
            <h3 class="fw-bold m-0">Add New Course</h3>
        </div>
    </div>
    <div id="kt_account_profile_details" class="collapse show">
        <form id="add-course-form" class="form" enctype="multipart/form-data">
            <div class="card-body border-top p-9">
                <div id="validation-summary" class="text-danger" style="display: none;"></div>
                
                <div class="row mb-6">
                    <label class="col-lg-4 col-form-label required fw-semibold fs-6">Title</label>
                    <div class="col-lg-8">
                        <input id="course-title" class="form-control form-control-lg form-control-solid mb-3 mb-lg-0" />
                        <span id="title-error" class="text-danger"></span>
                    </div>
                </div>
                
                <div class="row mb-6">
                    <label class="col-lg-4 col-form-label required fw-semibold fs-6">Description</label>
                    <div class="col-lg-8">
                        <textarea id="course-description" class="form-control form-control-lg form-control-solid"></textarea>
                        <span id="description-error" class="text-danger"></span>
                    </div>
                </div>
                
                <div class="row mb-6">
                    <label class="col-lg-4 col-form-label required fw-semibold fs-6">Course Segments</label>
                    <div class="col-lg-8">
                        <div id="segments-container">
                            <!-- Segments will be added dynamically -->
                        </div>
                        <button type="button" id="add-segment-btn" class="btn btn-light-primary btn-sm">
                            <i class="ki-duotone ki-plus fs-3"></i>Add Segment
                        </button>
                    </div>
                </div>
                
                <div class="row mb-6">
                    <label class="col-lg-4 col-form-label required fw-semibold fs-6">Duration (minutes)</label>
                    <div class="col-lg-8">
                        <input id="course-duration" type="number" class="form-control form-control-lg form-control-solid" />
                        <span id="duration-error" class="text-danger"></span>
                    </div>
                </div>
                
                <div class="row mb-6">
                    <label class="col-lg-4 col-form-label required fw-semibold fs-6">Order</label>
                    <div class="col-lg-8">
                        <input id="course-order" type="number" class="form-control form-control-lg form-control-solid" />
                        <span id="order-error" class="text-danger"></span>
                    </div>
                </div>
                
                <div class="row mb-6">
                    <label class="col-lg-4 col-form-label fw-semibold fs-6">Is Active</label>
                    <div class="col-lg-8 d-flex align-items-center">
                        <div class="form-check form-check-solid form-switch">
                            <input class="form-check-input" type="checkbox" id="course-is-active" checked />
                            <label class="form-check-label" for="course-is-active"></label>
                        </div>
                    </div>
                </div>
                
                <div class="row mb-6">
                    <label class="col-lg-4 col-form-label fw-semibold fs-6">Academy Package</label>
                    <div class="col-lg-8">
                        <select id="course-package" class="form-select form-select-solid">
                            <option value="">-- Select Package --</option>
                        </select>
                        <span id="package-error" class="text-danger"></span>
                    </div>
                </div>
            </div>
            
            <div class="card-footer d-flex justify-content-end py-6 px-9">
                <button type="reset" class="btn btn-light btn-active-light-primary me-2">Discard</button>
                <button type="submit" class="btn btn-primary" id="save-btn">
                    <span class="indicator-label">Save Changes</span>
                    <span class="indicator-progress" style="display: none;">Please wait...
                        <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                    </span>
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let segmentIndex = 0;
        let packages = [];

        function showLoading() {
            $('#loading-spinner').show();
        }

        function hideLoading() {
            $('#loading-spinner').hide();
        }

        function showError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: message
            });
        }

        function showSuccess(message, callback) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: message,
                showConfirmButton: false,
                timer: 2000
            }).then(() => {
                if (callback) callback();
            });
        }

        function initTinyMCE(selector) {
            tinymce.init({
                selector: selector,
                plugins: 'advlist autolink lists link image charmap print preview anchor',
                toolbar: 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',
                height: 300
            });
        }

        function loadPackages() {
            showLoading();
            $.get('/api/coursesapi/packages')
                .then(packagesResponse => {
                    packages = packagesResponse;
                    populatePackages();
                    hideLoading();
                })
                .catch(error => {
                    console.error('Error loading packages:', error);
                    hideLoading();
                    showError('Failed to load packages. Please refresh the page.');
                });
        }

        function populatePackages() {
            const packageSelect = $('#course-package');
            packageSelect.empty().append('<option value="">-- Select Package --</option>');
            packages.forEach(pkg => {
                packageSelect.append(`<option value="${pkg.id}">${pkg.name}</option>`);
            });
        }

        function addSegment() {
            const container = document.getElementById('segments-container');
            const currentIndex = segmentIndex;
            
            const segmentHtml = `
                <div class="card mb-4" id="segment-card-${currentIndex}">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 segment-title">Segment ${currentIndex + 1}</h5>
                        <button type="button" class="btn btn-sm btn-light-danger remove-segment-btn" 
                                onclick="removeSegment(${currentIndex})">
                            <i class="ki-duotone ki-trash fs-6"></i>Remove
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <label class="form-label required">Segment Title</label>
                            <input name="segments[${currentIndex}].title" class="form-control segment-title-input" 
                                   onchange="updateSegmentTitle(${currentIndex}, this.value)" />
                            <input name="segments[${currentIndex}].order" type="hidden" value="${currentIndex + 1}" class="segment-order" />
                            <input name="segments[${currentIndex}].isActive" type="hidden" value="true" class="segment-active" />
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Video URL</label>
                            <input name="segments[${currentIndex}].videoUrl" class="form-control segment-video-url" 
                                   placeholder="https://..." />
                        </div>
                        <div class="mb-4">
                            <label class="form-label required">Content</label>
                            <textarea name="segments[${currentIndex}].content" class="form-control segment-content" 
                                      id="segment-content-${currentIndex}"></textarea>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', segmentHtml);
            
            // Initialize TinyMCE for the new segment
            setTimeout(() => {
                initTinyMCE(`#segment-content-${currentIndex}`);
            }, 100);
            
            segmentIndex++;
        }

        function removeSegment(index) {
            // Remove TinyMCE instance
            tinymce.get(`segment-content-${index}`)?.remove();
            
            // Remove the card
            document.getElementById(`segment-card-${index}`).remove();
            
            // Reindex remaining segments
            reindexSegments();
        }

        function updateSegmentTitle(index, title) {
            const titleSpan = document.querySelector(`#segment-card-${index} .segment-title`);
            titleSpan.textContent = title || `Segment ${index + 1}`;
        }

        function reindexSegments() {
            const segments = Array.from(document.querySelectorAll('#segments-container .card'));
            segments.forEach((segment, newIndex) => {
                segment.id = `segment-card-${newIndex}`;
                
                // Update form field names and IDs
                const inputs = segment.querySelectorAll('input, textarea');
                inputs.forEach(input => {
                    const name = input.name;
                    if (name && name.includes('segments[')) {
                        const newName = name.replace(/segments\[\d+\]/, `segments[${newIndex}]`);
                        input.name = newName;
                    }
                    if (input.id && input.id.includes('segment-content-')) {
                        input.id = `segment-content-${newIndex}`;
                    }
                });
                
                // Update order value
                const orderInput = segment.querySelector('.segment-order');
                if (orderInput) orderInput.value = newIndex + 1;
                
                // Update button onclick
                const removeBtn = segment.querySelector('.remove-segment-btn');
                if (removeBtn) removeBtn.setAttribute('onclick', `removeSegment(${newIndex})`);
                
                const titleInput = segment.querySelector('.segment-title-input');
                if (titleInput) titleInput.setAttribute('onchange', `updateSegmentTitle(${newIndex}, this.value)`);
            });
            
            // Update segment index
            segmentIndex = segments.length;
        }

        function collectFormData() {
            const segments = [];
            
            // Collect segment data
            $('#segments-container .card').each(function(index) {
                // Update TinyMCE content
                const contentId = $(this).find('.segment-content').attr('id');
                if (tinymce.get(contentId)) {
                    tinymce.get(contentId).save();
                }
                
                segments.push({
                    title: $(this).find('.segment-title-input').val(),
                    content: $(this).find('.segment-content').val(),
                    videoUrl: $(this).find('.segment-video-url').val(),
                    order: parseInt($(this).find('.segment-order').val()),
                    isActive: $(this).find('.segment-active').val() === 'true'
                });
            });

            return {
                title: $('#course-title').val(),
                description: $('#course-description').val(),
                duration: parseInt($('#course-duration').val()) || 0,
                order: parseInt($('#course-order').val()) || 0,
                isActive: $('#course-is-active').is(':checked'),
                academyPackageId: $('#course-package').val() ? parseInt($('#course-package').val()) : null,
                segments: segments
            };
        }

        function submitForm() {
            const saveBtn = $('#save-btn');
            const indicatorLabel = saveBtn.find('.indicator-label');
            const indicatorProgress = saveBtn.find('.indicator-progress');
            
            // Show loading state
            indicatorLabel.hide();
            indicatorProgress.show();
            saveBtn.prop('disabled', true);
            
            const formData = collectFormData();

            $.ajax({
                url: '/api/coursesapi',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    showSuccess('Course created successfully!', function() {
                        window.location.href = '/Admin/Academy/Courses';
                    });
                },
                error: function(xhr) {
                    let errorMessage = 'Failed to create course. Please try again.';
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    }
                    showError(errorMessage);
                },
                complete: function() {
                    // Reset button state
                    indicatorLabel.show();
                    indicatorProgress.hide();
                    saveBtn.prop('disabled', false);
                }
            });
        }

        $(document).ready(function() {
            // Load packages on page load
            loadPackages();

            // Handle add segment button
            $('#add-segment-btn').click(function() {
                addSegment();
            });

            // Handle form submission
            $('#add-course-form').on('submit', function(e) {
                e.preventDefault();
                submitForm();
            });

            // Add initial segment
            addSegment();
        });
    </script>
}

