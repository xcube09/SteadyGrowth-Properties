@page
@model SteadyGrowth.Web.Areas.Admin.Pages.Academy.CoursesModel
@{
    ViewData["Title"] = "Manage Courses";
}

<form id="courses-form" method="post">
    @Html.AntiForgeryToken()
    <div class="card">
        <div class="card-header border-0 pt-6">
            <div class="card-title">
                <div class="d-flex align-items-center position-relative my-1">
                    <i class="ki-duotone ki-magnifier fs-3 position-absolute ms-5"></i>
                    <input type="text" data-kt-course-table-filter="search" class="form-control form-control-solid w-250px ps-13" placeholder="Search courses" />
                </div>
            </div>
            <div class="card-toolbar">
                <div class="d-flex justify-content-end" data-kt-course-table-toolbar="base">
                    <button type="button" class="btn btn-light-primary me-3" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">
                        <i class="ki-duotone ki-filter fs-2"></i>Filter
                    </button>
                    <div class="menu menu-sub menu-sub-dropdown w-300px w-md-325px" data-kt-menu="true">
                        <div class="px-7 py-5">
                            <div class="fs-5 text-dark fw-bold">Filter Options</div>
                        </div>
                        <div class="separator border-gray-200"></div>
                        <div class="px-7 py-5" data-kt-course-table-filter="form">
                            <div class="mb-10">
                                <label class="form-label fs-6 fw-semibold">Package:</label>
                                <select class="form-select form-select-solid fw-bold" data-kt-select2="true" data-placeholder="Select package" data-allow-clear="true" data-kt-course-table-filter="package" data-hide-search="true">
                                    <option></option>
                                    @if (Model.AvailablePackages != null)
                                    {
                                        @foreach (var package in Model.AvailablePackages)
                                        {
                                            <option value="@package.Id">@package.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="reset" class="btn btn-light btn-active-light-primary fw-semibold me-2 px-6" data-kt-menu-dismiss="true" data-kt-course-table-filter="reset">Reset</button>
                                <button type="submit" class="btn btn-primary fw-semibold px-6" data-kt-menu-dismiss="true" data-kt-course-table-filter="filter">Apply</button>
                            </div>
                        </div>
                    </div>
                    <a asp-page="./Add" class="btn btn-light-primary me-3">
                        <i class="ki-duotone ki-plus fs-2"></i>Add Course
                    </a>
                </div>
                <div class="d-flex justify-content-end align-items-center d-none" data-kt-course-table-toolbar="selected">
                    <div class="fw-bold me-5">
                        <span class="me-2" data-kt-course-table-select="selected_count"></span>Selected
                    </div>
                    <button type="button" class="btn btn-danger" data-kt-course-table-select="delete_selected">Delete Selected</button>
                </div>
            </div>
        </div>
        <div class="card-body py-4">
            <table class="table align-middle table-row-dashed fs-6 gy-5" id="kt_table_courses">
                <thead>
                    <tr class="text-start text-muted fw-bold fs-7 text-uppercase gs-0">
                        <th class="w-10px pe-2">
                            <div class="form-check form-check-sm form-check-custom form-check-solid me-3">
                                <input class="form-check-input" type="checkbox" data-kt-check="true" data-kt-check-target="#kt_table_courses .form-check-input" value="1" />
                            </div>
                        </th>
                        <th class="min-w-125px">Title</th>
                        <th class="min-w-125px">Package</th>
                        <th class="min-w-125px">Duration</th>
                        <th class="min-w-125px">Order</th>
                        <th class="min-w-125px">Active</th>
                        <th class="text-end min-w-100px">Actions</th>
                    </tr>
                </thead>
                <tbody class="text-gray-600 fw-semibold">
                    @if (Model.Courses != null && Model.Courses.Any())
                    {
                        @foreach (var course in Model.Courses)
                        {
                            <tr>
                                <td>
                                    <div class="form-check form-check-sm form-check-custom form-check-solid">
                                        <input class="form-check-input" type="checkbox" value="@course.Id" />
                                    </div>
                                </td>
                                <td>@course.Title</td>
                                <td>@(course.AcademyPackage?.Name ?? "N/A")</td>
                                <td>@course.Duration minutes</td>
                                <td>@course.Order</td>
                                <td>
                                    <div class="badge @(course.IsActive ? "badge-light-success" : "badge-light-danger")">
                                        @(course.IsActive ? "Yes" : "No")
                                    </div>
                                </td>
                                <td class="text-end">
                                    <a href="#" class="btn btn-light btn-active-light-primary btn-sm" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">Actions
                                        <i class="ki-duotone ki-down fs-5 ms-1"></i>
                                    </a>
                                    <div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-semibold fs-7 w-125px py-4" data-kt-menu="true">
                                        <div class="menu-item px-3">
                                            <a asp-page="./Edit" asp-route-id="@course.Id" class="menu-link px-3">Edit</a>
                                        </div>
                                        <div class="menu-item px-3">
                                            <a href="#" class="menu-link px-3" data-kt-course-table-filter="delete_row" data-course-id="@course.Id">Delete</a>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7">No courses found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</form>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        "use strict";

        // Class definition
        var KTUsersList = function () {
            // Define shared variables
            var table = document.getElementById('kt_table_courses');
            var datatable;
            var toolbarBase;
            var toolbarSelected;
            var selectedCount;

            // Private functions
            var initCourseTable = function () {
                // Init datatable --- more info on datatables: https://datatables.net/manual/initialisation
                datatable = $(table).DataTable({
                    "info": false,
                    'order': [],
                    'pageLength': 10,
                    'columnDefs': [
                        { orderable: false, targets: 0 }, // Disable ordering on checkbox column
                        { orderable: false, targets: 6 }  // Disable ordering on actions column
                    ]
                });

                // Re-init functions on every table re-draw
                datatable.on('draw', function () {
                    initToggleToolbar();
                    handleDeleteRows();
                    KTMenu.createInstances();
                });
            }

            // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
            var handleSearchDatatable = function () {
                const filterSearch = document.querySelector('[data-kt-course-table-filter="search"]');
                filterSearch.addEventListener('keyup', function (e) {
                    datatable.search(e.target.value).draw();
                });
            }

            // Delete subscription
            var handleDeleteRows = function () {
                // Use event delegation to handle clicks on dynamically created delete buttons
                $(table).on('click', '[data-kt-course-table-filter="delete_row"]', function (e) {
                    e.preventDefault();
                    const parent = e.target.closest('tr');
                    const courseTitle = parent.querySelectorAll('td')[1].innerText;
                    const courseId = e.target.getAttribute('data-course-id');

                    Swal.fire({
                        text: "Are you sure you want to delete " + courseTitle + "?",
                        icon: "warning",
                        showCancelButton: true,
                        buttonsStyling: false,
                        confirmButtonText: "Yes, delete!",
                        cancelButtonText: "No, cancel",
                        customClass: {
                            confirmButton: "btn fw-bold btn-danger",
                            cancelButton: "btn fw-bold btn-active-light-primary"
                        }
                    }).then(function (result) {
                        if (result.value) {
                            $.ajax({
                                url: `?handler=Delete`,
                                type: 'POST',
                                headers: {
                                    'X-XSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val()
                                },
                                contentType: 'application/json',
                                data: JSON.stringify({ Id: parseInt(courseId) }), // Match C# model property 'Id'
                                success: function (data) {
                                    if (data.success) {
                                        Swal.fire({
                                            text: "You have deleted " + courseTitle + ".",
                                            icon: "success",
                                            buttonsStyling: false,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn fw-bold btn-primary",
                                            }
                                        }).then(function () {
                                            datatable.row($(parent)).remove().draw();
                                        });
                                    } else {
                                        Swal.fire({
                                            text: data.message || "An error occurred while deleting.",
                                            icon: "error",
                                            buttonsStyling: false,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn fw-bold btn-primary",
                                            }
                                        });
                                    }
                                }
                            });
                        } else if (result.dismiss === 'cancel') {
                            Swal.fire({
                                text: courseTitle + " was not deleted.",
                                icon: "error",
                                buttonsStyling: false,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn fw-bold btn-primary",
                                }
                            });
                        }
                    });
                });
            }

            // Init toggle toolbar
            var initToggleToolbar = function () {
                // Toggle selected action toolbar
                // Select all checkboxes
                const checkboxes = table.querySelectorAll('[type="checkbox"]');

                // Select elements
                toolbarBase = document.querySelector('[data-kt-course-table-toolbar="base"]');
                toolbarSelected = document.querySelector('[data-kt-course-table-toolbar="selected"]');
                selectedCount = document.querySelector('[data-kt-course-table-select="selected_count"]');
                const deleteSelected = document.querySelector('[data-kt-course-table-select="delete_selected"]');

                // Toggle delete selected toolbar
                checkboxes.forEach(c => {
                    // Checkbox on click event
                    c.addEventListener('click', function () {
                        setTimeout(function () {
                            toggleToolbars();
                        }, 50);
                    });
                });

                // Deleted selected rows
                deleteSelected.addEventListener('click', function () {
                    // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/
                    Swal.fire({
                        text: "Are you sure you want to delete selected courses?",
                        icon: "warning",
                        showCancelButton: true,
                        buttonsStyling: false,
                        confirmButtonText: "Yes, delete!",
                        cancelButtonText: "No, cancel",
                        customClass: {
                            confirmButton: "btn fw-bold btn-danger",
                            cancelButton: "btn fw-bold btn-active-light-primary"
                        }
                    }).then(function (result) {
                        if (result.value) {
                            const selectedIds = [];
                            const allCheckboxes = table.querySelectorAll('tbody [type="checkbox"]');
                            allCheckboxes.forEach(c => {
                                if (c.checked) {
                                    selectedIds.push(parseInt(c.value));
                                }
                            });

                            $.ajax({
                                url: `?handler=DeleteSelected`,
                                type: 'POST',
                                headers: {
                                    'X-XSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val()
                                },
                                contentType: 'application/json',
                                data: JSON.stringify(selectedIds),
                                success: function (data) {
                                    if (data.success) {
                                        Swal.fire({
                                            text: "You have deleted all selected courses!.",
                                            icon: "success",
                                            buttonsStyling: false,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn fw-bold btn-primary",
                                            }
                                        }).then(function () {
                                            // Remove all selected courses
                                            allCheckboxes.forEach(c => {
                                                if (c.checked) {
                                                    datatable.row($(c.closest('tbody tr'))).remove().draw();
                                                }
                                            });

                                            // Remove header checked box
                                            const headerCheckbox = table.querySelector('thead [type="checkbox"]');
                                            if(headerCheckbox) {
                                               headerCheckbox.checked = false;
                                            }
                                            toggleToolbars(); // Reset toolbar
                                        });
                                    } else {
                                        Swal.fire({
                                            text: data.message || "An error occurred.",
                                            icon: "error",
                                            buttonsStyling: false,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn fw-bold btn-primary",
                                            }
                                        });
                                    }
                                }
                            });
                        } else if (result.dismiss === 'cancel') {
                            Swal.fire({
                                text: "Selected courses were not deleted.",
                                icon: "error",
                                buttonsStyling: false,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn fw-bold btn-primary",
                                }
                            });
                        }
                    });
                });
            }

            // Toggle toolbars
            const toggleToolbars = () => {
                // Select refreshed checkbox DOM elements
                const allCheckboxes = table.querySelectorAll('tbody [type="checkbox"]');

                // Detect checkboxes state & count
                let checkedState = false;
                let count = 0;

                // Count checked boxes
                allCheckboxes.forEach(c => {
                    if (c.checked) {
                        checkedState = true;
                        count++;
                    }
                });

                // Toggle toolbars
                if (checkedState) {
                    selectedCount.innerHTML = count;
                    toolbarBase.classList.add('d-none');
                    toolbarSelected.classList.remove('d-none');
                } else {
                    toolbarBase.classList.remove('d-none');
                    toolbarSelected.classList.add('d-none');
                }
            }

            // Public methods
            return {
                init: function () {
                    if (!table) {
                        return;
                    }

                    initCourseTable();
                    initToggleToolbar();
                    handleSearchDatatable();
                    handleDeleteRows();
                }
            }
        }();

        // On document ready
        KTUtil.onDOMContentLoaded(function () {
            setTimeout(() => {
                 KTUsersList.init();
            }, 500); // Delay initialization to ensure plugins are loaded
        });

    </script>
}