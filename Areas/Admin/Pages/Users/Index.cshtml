@page
@model SteadyGrowth.Web.Areas.Admin.Pages.Users.IndexModel
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@{
    ViewData["Title"] = "User Management";
}

<div class="card">
    <div class="card-header border-0 pt-6">
        <div class="card-title">
            <div class="d-flex align-items-center position-relative my-1">
                <i class="ki-duotone ki-magnifier fs-3 position-absolute ms-5"></i>
                <input type="text" data-kt-user-table-filter="search" class="form-control form-control-solid w-250px ps-13" placeholder="Search user" value="@Model.SearchTerm" />
            </div>
        </div>
        <div class="card-toolbar">
            <div class="d-flex justify-content-end" data-kt-user-table-toolbar="base">
                <button type="button" class="btn btn-light-primary me-3" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">
                    <i class="ki-duotone ki-filter fs-2"></i>Filter
                </button>
                <div class="menu menu-sub menu-sub-dropdown w-300px w-md-325px" data-kt-menu="true">
                    <div class="px-7 py-5">
                        <div class="fs-5 text-dark fw-bold">Filter Options</div>
                    </div>
                    <div class="separator border-gray-200"></div>
                    <div class="px-7 py-5" data-kt-user-table-filter="form">
                        <div class="mb-10">
                            <label class="form-label fs-6 fw-semibold">Status:</label>
                            <select class="form-select form-select-solid fw-bold" data-kt-select2="true" data-placeholder="Select option" data-allow-clear="true" data-kt-user-table-filter="status" data-hide-search="true">
                                <option></option>
                                <option value="Active" selected="@(Model.StatusFilter == "Active")">Active</option>
                                <option value="Suspended" selected="@(Model.StatusFilter == "Suspended")">Suspended</option>
                                <option value="Pending" selected="@(Model.StatusFilter == "Pending")">Pending</option>
                            </select>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="reset" class="btn btn-light btn-active-light-primary fw-semibold me-2 px-6" data-kt-menu-dismiss="true" data-kt-user-table-filter="reset">Reset</button>
                            <button type="submit" class="btn btn-primary fw-semibold px-6" data-kt-menu-dismiss="true" data-kt-user-table-filter="filter">Apply</button>
                        </div>
                    </div>
                </div>
                <button type="button" class="btn btn-light-primary me-3" data-bs-toggle="modal" data-bs-target="#kt_modal_add_user">
                    <i class="ki-duotone ki-plus fs-2"></i>Add User
                </button>
            </div>
            <div class="d-flex justify-content-end align-items-center d-none" data-kt-user-table-toolbar="selected">
                <div class="fw-bold me-5">
                    <span class="me-2" data-kt-user-table-select="selected_count"></span>Selected
                </div>
                <button type="button" class="btn btn-danger" data-kt-user-table-select="delete_selected">Delete Selected</button>
            </div>
        </div>
    </div>
    <div class="card-body py-4">
        <table class="table align-middle table-row-dashed fs-6 gy-5" id="kt_table_users">
            <thead>
                <tr class="text-start text-muted fw-bold fs-7 text-uppercase gs-0">
                    <th class="w-10px pe-2">
                        <div class="form-check form-check-sm form-check-custom form-check-solid me-3">
                            <input class="form-check-input" type="checkbox" data-kt-check="true" data-kt-check-target="#kt_table_users .form-check-input" value="1" />
                        </div>
                    </th>
                    <th class="min-w-125px">User</th>
                    <th class="min-w-125px">Role</th>
                    <th class="min-w-125px">Status</th>
                    <th class="min-w-125px">Joined Date</th>
                    <th class="min-w-125px">Wallet Balance</th>
                    <th class="text-end min-w-100px">Actions</th>
                </tr>
            </thead>
            <tbody class="text-gray-600 fw-semibold">
                @if (Model.Users != null && Model.Users.Any())
                {
                    @foreach (var user in Model.Users)
                    {
                        <tr>
                            <td>
                                <div class="form-check form-check-sm form-check-custom form-check-solid">
                                    <input class="form-check-input" type="checkbox" value="@user.Id" />
                                </div>
                            </td>
                            <td class="d-flex align-items-center">
                                <div class="symbol symbol-circle symbol-50px overflow-hidden me-3">
                                    <a href="../../users/view.html">
                                        <div class="symbol-label fs-3 bg-light-danger text-danger">@user.FullName.FirstOrDefault()</div>
                                    </a>
                                </div>
                                <div class="d-flex flex-column">
                                    <a asp-page="./Details" asp-route-id="@user.Id" class="text-gray-800 text-hover-primary mb-1">@user.FullName</a>
                                    <span>@user.Email</span>
                                </div>
                            </td>
                            <td>@user.Role</td>
                            <td>
                                <div class="badge badge-light-@(GetStatusColor(user.Status)) fw-bold">@user.Status</div>
                            </td>
                            <td>@user.RegisteredAt.ToShortDateString()</td>
                            <td><span class="fw-bold text-primary">â‚¦@user.WalletBalance.ToString("N2")</span></td>
                            <td class="text-end">
                                <a href="#" class="btn btn-light btn-active-light-primary btn-sm" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">Actions
                                    <i class="ki-duotone ki-down fs-5 ms-1"></i>
                                </a>
                                <div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-semibold fs-7 w-125px py-4" data-kt-menu="true">
                                    <div class="menu-item px-3">
                                        <a asp-page="./Details" asp-route-id="@user.Id" class="menu-link px-3">View</a>
                                    </div>
                                    <div class="menu-item px-3">
                                        <a href="#" class="menu-link px-3" data-kt-users-table-filter="delete_row">Delete</a>
                                    </div>
                                    <div class="menu-item px-3">
                                        <a href="#" class="menu-link px-3 wallet-action-btn" data-user-id="@user.Id" data-user-name="@user.FullName" data-user-email="@user.Email">Wallet</a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center py-10">
                            <div class="d-flex flex-column align-items-center">
                                <i class="ki-duotone ki-user fs-3x text-muted mb-5"></i>
                                <span class="text-muted fs-6">No users found</span>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    <!-- Pagination -->
    @if (Model.Users != null && Model.Users.TotalPages > 1)
    {
        <div class="card-footer d-flex justify-content-between align-items-center flex-wrap">
            <div class="d-flex flex-wrap py-2 mr-3">
                <div class="d-flex align-items-center my-2">
                    <span class="text-muted fs-7 fw-bold me-5">Showing @(((Model.PageIndex - 1) * Model.PageSize) + 1) to @Math.Min(Model.PageIndex * Model.PageSize, Model.TotalCount) of @Model.TotalCount entries</span>
                </div>
            </div>
            <div class="d-flex flex-stack flex-wrap pt-10">
                <ul class="pagination">
                    @if (Model.Users.HasPreviousPage)
                    {
                        <li class="page-item previous">
                            <a asp-page="./Index" asp-route-pageIndex="@(Model.PageIndex - 1)" asp-route-search="@Model.SearchTerm" asp-route-status="@Model.StatusFilter" class="page-link">
                                <i class="previous"></i>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item previous disabled">
                            <span class="page-link">
                                <i class="previous"></i>
                            </span>
                        </li>
                    }

                    @{
                        var startPage = Math.Max(1, Model.PageIndex - 2);
                        var endPage = Math.Min(Model.Users.TotalPages, Model.PageIndex + 2);
                    }

                    @if (startPage > 1)
                    {
                        <li class="page-item">
                            <a asp-page="./Index" asp-route-pageIndex="1" asp-route-search="@Model.SearchTerm" asp-route-status="@Model.StatusFilter" class="page-link">1</a>
                        </li>
                        @if (startPage > 2)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        if (i == Model.PageIndex)
                        {
                            <li class="page-item active">
                                <span class="page-link">@i</span>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a asp-page="./Index" asp-route-pageIndex="@i" asp-route-search="@Model.SearchTerm" asp-route-status="@Model.StatusFilter" class="page-link">@i</a>
                            </li>
                        }
                    }

                    @if (endPage < Model.Users.TotalPages)
                    {
                        @if (endPage < Model.Users.TotalPages - 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                        <li class="page-item">
                            <a asp-page="./Index" asp-route-pageIndex="@Model.Users.TotalPages" asp-route-search="@Model.SearchTerm" asp-route-status="@Model.StatusFilter" class="page-link">@Model.Users.TotalPages</a>
                        </li>
                    }

                    @if (Model.Users.HasNextPage)
                    {
                        <li class="page-item next">
                            <a asp-page="./Index" asp-route-pageIndex="@(Model.PageIndex + 1)" asp-route-search="@Model.SearchTerm" asp-route-status="@Model.StatusFilter" class="page-link">
                                <i class="next"></i>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item next disabled">
                            <span class="page-link">
                                <i class="next"></i>
                            </span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
</div>

<!-- Wallet Modal -->
<div class="modal fade" id="walletModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="walletForm">
                <div class="modal-header">
                    <h5 class="modal-title">Credit/Debit Wallet</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="walletUserId" name="UserId" />
                    <div class="mb-3">
                        <label class="form-label">User</label>
                        <div id="walletUserInfo"></div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Type</label>
                        <select class="form-select" id="walletType" name="Type">
                            <option value="credit">Credit</option>
                            <option value="debit">Debit</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Amount</label>
                        <input type="number" class="form-control" id="walletAmount" name="Amount" min="1" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input type="text" class="form-control" id="walletDescription" name="Description" maxlength="200" required />
                    </div>
                    <div id="walletModalFeedback" class="text-danger"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var KTUsersList = function () {
            var table = document.querySelector('#kt_table_users');
            var toolbarBase;
            var toolbarSelected;
            var selectedCount;

            var initUserTable = function () {
                // Remove DataTable initialization since we're using server-side pagination
                handleDeleteRows();
                toggleToolbar();
            };

            var handleSearchDatatable = function () {
                const filterSearch = document.querySelector('[data-kt-user-table-filter="search"]');
                if (filterSearch) {
                    filterSearch.addEventListener('keyup', function (e) {
                        if (e.key === 'Enter') {
                            const searchTerm = this.value;
                            const currentUrl = new URL(window.location);
                            currentUrl.searchParams.set('search', searchTerm);
                            currentUrl.searchParams.set('pageIndex', '1'); // Reset to first page
                            window.location.href = currentUrl.toString();
                        }
                    });
                }
            };

            var handleFilterDatatable = function () {
                const filterForm = document.querySelector('[data-kt-user-table-filter="form"]');
                const filterButton = document.querySelector('[data-kt-user-table-filter="filter"]');
                const resetButton = document.querySelector('[data-kt-user-table-filter="reset"]');

                if (filterButton) {
                    filterButton.addEventListener('click', function () {
                        const statusFilter = document.querySelector('[data-kt-user-table-filter="status"]');
                        const searchFilter = document.querySelector('[data-kt-user-table-filter="search"]');
                        
                        const currentUrl = new URL(window.location);
                        if (statusFilter && statusFilter.value) {
                            currentUrl.searchParams.set('status', statusFilter.value);
                        } else {
                            currentUrl.searchParams.delete('status');
                        }
                        if (searchFilter && searchFilter.value) {
                            currentUrl.searchParams.set('search', searchFilter.value);
                        } else {
                            currentUrl.searchParams.delete('search');
                        }
                        currentUrl.searchParams.set('pageIndex', '1'); // Reset to first page
                        window.location.href = currentUrl.toString();
                    });
                }

                if (resetButton) {
                    resetButton.addEventListener('click', function () {
                        const currentUrl = new URL(window.location);
                        currentUrl.searchParams.delete('search');
                        currentUrl.searchParams.delete('status');
                        currentUrl.searchParams.set('pageIndex', '1');
                        window.location.href = currentUrl.toString();
                    });
                }
            };

            var handleDeleteRows = function () {
                const deleteButtons = document.querySelectorAll('[data-kt-users-table-filter="delete_row"]');
                deleteButtons.forEach(d => {
                    d.addEventListener('click', function (e) {
                        e.preventDefault();
                        const userName = e.target.closest('tr').querySelector('td:nth-child(2) a').textContent;
                        Swal.fire({
                            text: "Are you sure you want to delete " + userName + "?",
                            icon: "warning",
                            showCancelButton: true,
                            buttonsStyling: false,
                            confirmButtonText: "Yes, delete!",
                            cancelButtonText: "No, cancel",
                            customClass: {
                                confirmButton: "btn fw-bold btn-danger",
                                cancelButton: "btn fw-bold btn-active-light-primary"
                            }
                        }).then(function (result) {
                            if (result.value) {
                                Swal.fire({
                                    text: "You have deleted " + userName + "!",
                                    icon: "success",
                                    buttonsStyling: false,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn fw-bold btn-primary",
                                    }
                                }).then(function () {
                                    e.target.closest('tr').remove();
                                });
                            } else if (result.dismiss === 'cancel') {
                                Swal.fire({
                                    text: userName + " was not deleted.",
                                    icon: "error",
                                    buttonsStyling: false,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn fw-bold btn-primary",
                                    }
                                });
                            }
                        });
                    });
                });
            };

            var handleSelectedRows = function () {
                const checkboxes = table.querySelectorAll('tbody [type="checkbox"]');
                const deleteSelected = document.querySelector('[data-kt-user-table-select="delete_selected"]');

                checkboxes.forEach(c => {
                    c.addEventListener('click', function () {
                        toggleToolbar();
                    });
                });

                if (deleteSelected) {
                    deleteSelected.addEventListener('click', function () {
                        Swal.fire({
                            text: "Are you sure you want to delete selected users?",
                            icon: "warning",
                            showCancelButton: true,
                            buttonsStyling: false,
                            confirmButtonText: "Yes, delete!",
                            cancelButtonText: "No, cancel",
                            customClass: {
                                confirmButton: "btn fw-bold btn-danger",
                                cancelButton: "btn fw-bold btn-active-light-primary"
                            }
                        }).then(function (result) {
                            if (result.value) {
                                Swal.fire({
                                    text: "You have deleted all selected users!",
                                    icon: "success",
                                    buttonsStyling: false,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn fw-bold btn-primary",
                                    }
                                }).then(function () {
                                    checkboxes.forEach(c => {
                                        if (c.checked) {
                                            c.closest('tr').remove();
                                        }
                                    });
                                    table.querySelectorAll('[type="checkbox"]')[0].checked = false;
                                });
                            } else if (result.dismiss === 'cancel') {
                                Swal.fire({
                                    text: "Selected users were not deleted.",
                                    icon: "error",
                                    buttonsStyling: false,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn fw-bold btn-primary",
                                    }
                                });
                            }
                        });
                    });
                }
            };

            var toggleToolbar = function () {
                const checkboxes = table.querySelectorAll('tbody [type="checkbox"]');
                toolbarBase = document.querySelector('[data-kt-user-table-toolbar="base"]');
                toolbarSelected = document.querySelector('[data-kt-user-table-toolbar="selected"]');
                selectedCount = document.querySelector('[data-kt-user-table-select="selected_count"]');

                let allSelected = false;
                let checkedState = 0;

                checkboxes.forEach(c => {
                    if (c.checked) {
                        checkedState++;
                    }
                });

                if (checkedState === checkboxes.length) {
                    allSelected = true;
                }

                if (checkedState > 0) {
                    selectedCount.innerHTML = checkedState;
                    toolbarBase.classList.add('d-none');
                    toolbarSelected.classList.remove('d-none');
                } else {
                    toolbarBase.classList.remove('d-none');
                    toolbarSelected.classList.add('d-none');
                }
            };

            return {
                init: function () {
                    initUserTable();
                    handleSearchDatatable();
                    handleFilterDatatable();
                    handleDeleteRows();
                    handleSelectedRows();
                }
            };
        }();

        KTUtil.onDOMContentLoaded(function () {
            KTUsersList.init();
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Use event delegation for wallet modal trigger
            document.addEventListener('click', function (e) {
                if (e.target.classList.contains('wallet-action-btn')) {
                    e.preventDefault();
                    var btn = e.target;
                    var userId = btn.getAttribute('data-user-id');
                    var userName = btn.getAttribute('data-user-name');
                    var userEmail = btn.getAttribute('data-user-email');
                    document.getElementById('walletUserId').value = userId;
                    document.getElementById('walletUserInfo').innerHTML = `<strong>${userName}</strong><br/><small>${userEmail}</small>`;
                    document.getElementById('walletModalFeedback').textContent = '';
                    var modal = new bootstrap.Modal(document.getElementById('walletModal'));
                    modal.show();
                }
            });
            // Handle form submit
            document.getElementById('walletForm').addEventListener('submit', async function (e) {
                e.preventDefault();
                var userId = document.getElementById('walletUserId').value;
                var type = document.getElementById('walletType').value;
                var amount = document.getElementById('walletAmount').value;
                var description = document.getElementById('walletDescription').value;
                var feedback = document.getElementById('walletModalFeedback');
                feedback.textContent = '';
                try {
                    const response = await fetch('/api/admin/wallet/transaction', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ userId, type, amount, description })
                    });
                    const result = await response.json();
                    if (result.success) {
                        feedback.classList.remove('text-danger');
                        feedback.classList.add('text-success');
                        feedback.textContent = 'Wallet updated successfully!';
                        // Close modal and show SweetAlert
                        var modalEl = document.getElementById('walletModal');
                        var modal = bootstrap.Modal.getInstance(modalEl);
                        modal.hide();
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Wallet updated successfully!',
                            timer: 2000,
                            showConfirmButton: false
                        });
                        setTimeout(() => { location.reload(); }, 2000);
                    } else {
                        feedback.classList.remove('text-success');
                        feedback.classList.add('text-danger');
                        feedback.textContent = result.message || 'Error updating wallet.';
                    }
                } catch (err) {
                    feedback.classList.remove('text-success');
                    feedback.classList.add('text-danger');
                    feedback.textContent = 'Error updating wallet.';
                }
            });
        });
    </script>
    @functions {
        private string GetStatusColor(string status) => status switch {
            "Active" => "success",
            "Suspended" => "danger",
            "Pending" => "warning",
            _ => "secondary"
        };
        public class UserAdminViewModel
        {
            public string Id { get; set; } = string.Empty;
            public string FullName { get; set; } = string.Empty;
            public string Email { get; set; } = string.Empty;
            public string Status { get; set; } = string.Empty;
            public string Role { get; set; } = string.Empty;
            public DateTime RegisteredAt { get; set; }
            public decimal WalletBalance { get; set; }
        }
        public class AuditLogViewModel
        {
            public DateTime Timestamp { get; set; }
            public string Action { get; set; } = string.Empty;
        }
    }
}