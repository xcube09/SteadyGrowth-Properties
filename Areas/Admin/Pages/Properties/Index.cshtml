@page
@model SteadyGrowth.Web.Areas.Admin.Pages.Properties.IndexModel
@{
    ViewData["Title"] = "Properties";
}

<div class="card">
    <div class="card-header border-0 pt-6">
        <div class="card-title">
            <div class="d-flex align-items-center position-relative my-1">
                <i class="ki-duotone ki-magnifier fs-3 position-absolute ms-5"></i>
                <input type="text" data-kt-property-table-filter="search" class="form-control form-control-solid w-250px ps-13" placeholder="Search properties" />
            </div>
        </div>
        <div class="card-toolbar">
            <div class="d-flex justify-content-end" data-kt-property-table-toolbar="base">
                <button type="button" class="btn btn-light-primary me-3" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">
                    <i class="ki-duotone ki-filter fs-2"></i>Filter
                </button>
                <a asp-page="./Add" class="btn btn-primary">
                    <i class="ki-duotone ki-plus fs-2"></i>Add Property
                </a>
                <div class="menu menu-sub menu-sub-dropdown w-300px w-md-325px" data-kt-menu="true">
                    <div class="px-7 py-5">
                        <div class="fs-5 text-dark fw-bold">Filter Options</div>
                    </div>
                    <div class="separator border-gray-200"></div>
                    <div class="px-7 py-5" data-kt-property-table-filter="form">
                        <div class="mb-10">
                            <label class="form-label fs-6 fw-semibold">Status:</label>
                            <select class="form-select form-select-solid fw-bold" data-kt-select2="true" data-placeholder="Select option" data-allow-clear="true" data-kt-property-table-filter="status" data-hide-search="true">
                                <option></option>
                                @foreach (var status in Enum.GetValues(typeof(SteadyGrowth.Web.Models.Entities.PropertyStatus)))
                                {
                                    <option value="@status">@status</option>
                                }
                            </select>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="reset" class="btn btn-light btn-active-light-primary fw-semibold me-2 px-6" data-kt-menu-dismiss="true" data-kt-property-table-filter="reset">Reset</button>
                            <button type="submit" class="btn btn-primary fw-semibold px-6" data-kt-menu-dismiss="true" data-kt-property-table-filter="filter">Apply</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-end align-items-center d-none" data-kt-property-table-toolbar="selected">
                <div class="fw-bold me-5">
                    <span class="me-2" data-kt-property-table-select="selected_count"></span>Selected
                </div>
                <button type="button" class="btn btn-danger" data-kt-property-table-select="delete_selected">Delete Selected</button>
            </div>
        </div>
    </div>
    <div class="card-body py-4">
        <table class="table align-middle table-row-dashed fs-6 gy-5" id="kt_table_properties">
            <thead>
                <tr class="text-start text-muted fw-bold fs-7 text-uppercase gs-0">
                    <th class="w-10px pe-2">
                        <div class="form-check form-check-sm form-check-custom form-check-solid me-3">
                            <input class="form-check-input" type="checkbox" data-kt-check="true" data-kt-check-target="#kt_table_properties .form-check-input" value="1" />
                        </div>
                    </th>
                    <th class="min-w-125px">Title</th>
                    <th class="min-w-125px">User</th>
                    <th class="min-w-125px">Status</th>
                    <th class="min-w-125px">Created</th>
                    <th class="text-end min-w-100px">Actions</th>
                </tr>
            </thead>
            <tbody class="text-gray-600 fw-semibold">
                @if (Model.Properties != null && Model.Properties.Any())
                {
                    @foreach (var property in Model.Properties)
                    {
                        <tr>
                            <td>
                                <div class="form-check form-check-sm form-check-custom form-check-solid">
                                    <input class="form-check-input" type="checkbox" value="@property.Id" />
                                </div>
                            </td>
                            <td>@property.Title</td>
                            <td>@property.UserEmail</td>
                            <td>
                                <div class="badge @(GetStatusBadgeClass((SteadyGrowth.Web.Models.Entities.PropertyStatus)Enum.Parse(typeof(SteadyGrowth.Web.Models.Entities.PropertyStatus), property.Status)))">
                                    @property.Status
                                </div>
                            </td>
                            <td>@property.CreatedAt.ToShortDateString()</td>
                            <td class="text-end">
                                <a href="#" class="btn btn-light btn-active-light-primary btn-sm" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">Actions
                                    <i class="ki-duotone ki-down fs-5 ms-1"></i>
                                </a>
                                <div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-semibold fs-7 w-125px py-4" data-kt-menu="true">
                                    <div class="menu-item px-3">
                                        <a asp-page="./Details" asp-route-id="@property.Id" class="menu-link px-3">View</a>
                                    </div>
                                    <div class="menu-item px-3">
                                        <a href="#" class="menu-link px-3" data-kt-property-table-filter="delete_row">Delete</a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6">No properties found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        var KTPropertiesList = function () {
            var table = document.querySelector('#kt_table_properties');
            var datatable;
            var toolbarBase;
            var toolbarSelected;
            var selectedCount;

            var initPropertyTable = function () {
                datatable = $(table).DataTable({
                    "info": false,
                    "order": [],
                    "pageLength": 10,
                    "lengthChange": false,
                    "columnDefs": [
                        { "orderable": false, "targets": 0 }, // Disable ordering on column 0 (checkbox)
                        { "orderable": false, "targets": 5 } // Disable ordering on column 5 (actions)
                    ]
                });

                datatable.on('draw', function () {
                    handleDeleteRows();
                    toggleToolbar();
                });
            };

            var handleSearchDatatable = function () {
                const filterSearch = document.querySelector('[data-kt-property-table-filter="search"]');
                filterSearch.addEventListener('keyup', function (e) {
                    datatable.search(e.target.value).draw();
                });
            };

            var handleFilterDatatable = function () {
                const filterForm = document.querySelector('[data-kt-property-table-filter="form"]');
                const filterButton = filterForm.querySelector('[data-kt-property-table-filter="filter"]');
                const resetButton = filterForm.querySelector('[data-kt-property-table-filter="reset"]');
                const selectOptions = filterForm.querySelectorAll('select');

                filterButton.addEventListener('click', function () {
                    var filterString = '';
                    selectOptions.forEach((item, index) => {
                        if (item.value && item.value !== '') {
                            if (index === 0) {
                                filterString += item.value;
                            } else {
                                filterString += " " + item.value;
                            }
                        }
                    });
                    datatable.search(filterString).draw();
                });

                resetButton.addEventListener('click', function () {
                    selectOptions.forEach(item => {
                        $(item).val(null).trigger('change');
                    });
                    datatable.search('').draw();
                });
            };

            var handleDeleteRows = function () {
                const deleteButtons = table.querySelectorAll('[data-kt-property-table-filter="delete_row"]');
                deleteButtons.forEach(d => {
                    d.addEventListener('click', function (e) {
                        e.preventDefault();
                        const parent = e.target.closest('tr');
                        const propertyTitle = parent.querySelectorAll('td')[1].innerText;
                        Swal.fire({
                            text: "Are you sure you want to delete " + propertyTitle + "?",
                            icon: "warning",
                            showCancelButton: true,
                            buttonsStyling: false,
                            confirmButtonText: "Yes, delete!",
                            cancelButtonText: "No, cancel",
                            customClass: {
                                confirmButton: "btn fw-bold btn-danger",
                                cancelButton: "btn fw-bold btn-active-light-primary"
                            }
                        }).then(function (result) {
                            if (result.value) {
                                Swal.fire({
                                    text: "You have deleted " + propertyTitle + "!",
                                    icon: "success",
                                    buttonsStyling: false,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn fw-bold btn-primary",
                                    }
                                }).then(function () {
                                    datatable.row($(parent)).remove().draw();
                                });
                            } else if (result.dismiss === 'cancel') {
                                Swal.fire({
                                    text: propertyTitle + " was not deleted.",
                                    icon: "error",
                                    buttonsStyling: false,
                                    confirmButtonText: "Ok, got it!",
                                    customClass: {
                                        confirmButton: "btn fw-bold btn-primary",
                                    }
                                });
                            }
                        });
                    });
                });
            };

            var handleSelectedRows = function () {
                const checkboxes = table.querySelectorAll('tbody [type="checkbox"]');
                const deleteSelected = document.querySelector('[data-kt-property-table-select="delete_selected"]');

                checkboxes.forEach(c => {
                    c.addEventListener('click', function () {
                        toggleToolbar();
                    });
                });

                deleteSelected.addEventListener('click', function () {
                    Swal.fire({
                        text: "Are you sure you want to delete selected properties?",
                        icon: "warning",
                        showCancelButton: true,
                        buttonsStyling: false,
                        confirmButtonText: "Yes, delete!",
                        cancelButtonText: "No, cancel",
                        customClass: {
                            confirmButton: "btn fw-bold btn-danger",
                            cancelButton: "btn fw-bold btn-active-light-primary"
                        }
                    }).then(function (result) {
                        if (result.value) {
                            Swal.fire({
                                text: "You have deleted all selected properties!",
                                icon: "success",
                                buttonsStyling: false,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn fw-bold btn-primary",
                                }
                            }).then(function () {
                                checkboxes.forEach(c => {
                                    if (c.checked) {
                                        datatable.row($(c.closest('tbody tr'))).remove().draw();
                                    }
                                });
                                table.querySelectorAll('[type="checkbox"]')[0].checked = false;
                            });
                        } else if (result.dismiss === 'cancel') {
                            Swal.fire({
                                text: "Selected properties were not deleted.",
                                icon: "error",
                                buttonsStyling: false,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn fw-bold btn-primary",
                                }
                            });
                        }
                    });
                });
            };

            var toggleToolbar = function () {
                const checkboxes = table.querySelectorAll('tbody [type="checkbox"]');
                toolbarBase = document.querySelector('[data-kt-property-table-toolbar="base"]');
                toolbarSelected = document.querySelector('[data-kt-property-table-toolbar="selected"]');
                selectedCount = document.querySelector('[data-kt-property-table-select="selected_count"]');

                let allSelected = false;
                let checkedState = 0;

                checkboxes.forEach(c => {
                    if (c.checked) {
                        checkedState++;
                    }
                });

                if (checkedState === checkboxes.length) {
                    allSelected = true;
                }

                if (checkedState > 0) {
                    selectedCount.innerHTML = checkedState;
                    toolbarBase.classList.add('d-none');
                    toolbarSelected.classList.remove('d-none');
                } else {
                    toolbarBase.classList.remove('d-none');
                    toolbarSelected.classList.add('d-none');
                }
            };

            return {
                init: function () {
                    initPropertyTable();
                    handleSearchDatatable();
                    handleFilterDatatable();
                    handleDeleteRows();
                    handleSelectedRows();
                }
            };
        }();

        KTUtil.onDOMContentLoaded(function () {
            KTPropertiesList.init();
        });
    </script>
    @functions {
        private string GetStatusBadgeClass(SteadyGrowth.Web.Models.Entities.PropertyStatus status) => status switch {
            SteadyGrowth.Web.Models.Entities.PropertyStatus.Draft => "badge-light-secondary",
            SteadyGrowth.Web.Models.Entities.PropertyStatus.Pending => "badge-light-warning",
            SteadyGrowth.Web.Models.Entities.PropertyStatus.Approved => "badge-light-success",
            SteadyGrowth.Web.Models.Entities.PropertyStatus.Rejected => "badge-light-danger",
            _ => "badge-light-info",
        };
    }
}